generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "./generated/typegraphql-prisma"
  emitTranspiledCode = true
}

model Account {
  id                 String    @id @default(uuid()) @db.Uuid
  userId             String    @db.Uuid
  providerType       String    @db.VarChar(255)
  providerId         String    @db.VarChar(255)
  providerAccountId  String    @db.VarChar(255)
  refreshToken       String?   @db.VarChar(255)
  accessToken        String?   @db.VarChar(255)
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  expires      DateTime
  sessionToken String   @unique @db.VarChar(255)
  accessToken  String   @unique @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  firstName     String?   @db.VarChar(255)
  lastName      String?   @db.VarChar(255)
  name          String?   @db.VarChar(255)
  email         String?   @unique @db.VarChar(255)
  password      String?   @db.VarChar(255)
  emailVerified DateTime?
  image         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(uuid()) @db.Uuid
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
